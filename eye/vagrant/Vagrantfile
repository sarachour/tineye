# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  config.vm.box = "dummy"

  if ENV['VM'] == 'vmware'
    config.vm.provider "vmware_fusion" do |vm|
      vm.memory = 6024
      vm.cpus = 3
    end
    config.vm.box = "bento/ubuntu-16.04"
  
  end

  if ENV['VM'] == 'aws'
    config.vm.box = "dummy"
    config.vm.provider :aws do |aws,override|
      aws.access_key_id = "YOUR KEY"
      aws.secret_access_key = "YOUR SECRET KEY"
      aws.session_token = "SESSION TOKEN"
      aws.keypair_name = "KEYPAIR NAME"
      override.ssh.username = "ubuntu"
      override.ssh.private_key_path = "PATH TO PRIVATE KEY"
    end

  end 

  if ENV['VM'] == 'virtualbox'
    config.vm.box = "ubuntu/xenial64"
    config.vm.provider "virtualbox" do |vm|
      vm.memory = 6024
      vm.cpus = 3
    end
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  #config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "..", "/eye",id:"eye"
  config.vm.synced_folder "../deps", "/deps",id:"deps"

   #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision :shell, path:"bootstrap.sh"
  config.vm.provision :shell, privileged: false,path:"bootstrap_user.sh"
  config.vm.provision :shell, path:"postprocess.sh"
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
